# vim: set syntax=python filetype=python:

import msgpack

class MergeSort:
	def __init__(self, unsorted):
		self.numInversion = 0
		self.seqLength = len(unsorted)
		self.primarySeq = unsorted
		self.auxiliarySeq = [None] * self.seqLength

		# Start sorting
		subLength = 1
		while subLength < self.seqLength:
			for subOffset in range(0, self.seqLength, subLength * 2):
				left = subOffset
				right = subOffset + subLength
				leftRemain = subLength
				rightRemain = subLength
				
				if right + rightRemain > self.seqLength:
					rightRemain = self.seqLength - right

					if left + leftRemain > self.seqLength:
						leftRemain = self.seqLength - left

				i = subOffset
				while rightRemain > 0 and leftRemain > 0:
					if self.primarySeq[right] < self.primarySeq[left]:
						self.auxiliarySeq[i] = self.primarySeq[right]
						right = right + 1
						rightRemain = rightRemain - 1
						self.numInversion = self.numInversion + leftRemain
					else:
						self.auxiliarySeq[i] = self.primarySeq[left]
						left = left + 1
						leftRemain = leftRemain - 1
					i = i + 1

				if rightRemain <= 0:
					self.auxiliarySeq[i:i + leftRemain] = self.primarySeq[left:left + leftRemain]
				elif leftRemain == 0:
					self.auxiliarySeq[i:subOffset + subLength * 2] = self.primarySeq[right:right + rightRemain]


			self.primarySeq, self.auxiliarySeq = self.auxiliarySeq, self.primarySeq
			subLength = subLength * 2


with open("input.txt", "rb") as input_file, open("output.txt", "wb") as output_file:
	inPack = msgpack.Unpacker(input_file, use_list = True)

	seq_count = inPack.unpack()
	for i in range(seq_count):
		seq = inPack.unpack()
		sortResult = MergeSort(seq)
		# print sortResult.primarySeq, sortResult.numInversion
		msgpack.pack(sortResult.numInversion, output_file)
